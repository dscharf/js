<!DOCTYPE html>
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Ajax Flickr Lï¿½sung Aufgabe 1</title>
    <link rel="stylesheet" type="text/css" href="images/style.css">
    <script>
        var seq = [9, 2, 6, 3, 8, 5, 8, 1, 7, 3, 4];

            function partitionImages() {
               //linearPartition(seq, 3);
                var x = linear_partition(seq, 3);
                module.exports(seq, 3);
                alert(x);
            }
    </script>
</head>

<body>
    <div id="controls">
        <input value="Mehr Bilder" onclick="partitionImages();" type="button">
        <div id="status">Fertig geladen</div>
    </div>
    <div id="container">
        <!-- HIER DIE BILDER REINLADEN -->
        <img src="images/3856050852_a6c5d4a209_m.jpg" height="240" width="179">
        <img src="images/14142885_35613a2ff4_m.jpg" height="180" width="240">
        <img src="images/2244887420_cb4ac08711_m.jpg" height="240" width="178">
        <img src="images/102901960_da63a0b298_m.jpg" height="240" width="180">
        <img src="images/3281890242_a6f1d9873f_m.jpg" height="161" width="240">
        <img src="images/2427121625_bb298138c6_m.jpg" height="150" width="240">
        <img src="images/2427907468_c093bc0ec7_m.jpg" height="150" width="240">
        <img src="images/693488199_36e43b456e_m.jpg" height="180" width="240">
        <img src="images/5009376459_be71bd20d4_m.jpg" height="240" width="202">
        <img src="images/5266834686_fa3b624349_m.jpg" height="240" width="240">
        <img src="images/9463690049_c8344a496e_m.jpg" height="116" width="240">
        <img src="images/3969039898_6fced28cc2_m.jpg" height="180" width="240">
        <img src="images/1206677068_cc8a9b80d8_m.jpg" height="180" width="240">
        <img src="images/6816739380_6e2b0259e6_m.jpg" height="240" width="180">
        <img src="images/6217369192_b8c4763274_m.jpg" height="180" width="240">
    </div>

    <script>
        var linear_partition, min;

        min = function(arr) {
            var computed, result, x, _i, _len;
            for (_i = 0, _len = arr.length; _i < _len; _i++) {
                x = arr[_i];
                computed = x[0];
                if (!result || computed < result.computed) {
                    result = {
                        value: x,
                        computed: computed
                    };
                }
            }
            return result.value;
        };

        linear_partition = function(seq, k) {
            var ans, i, j, m, n, solution, table, x, y, _i, _j, _k, _l;
            n = seq.length;
            if (k <= 0) {
                return [];
            }
            if (k > n) {
                return seq.map(function(x) {
                    return [x];
                });
            }
            table = (function() {
                var _i, _results;
                _results = [];
                for (y = _i = 0; 0 <= n ? _i < n : _i > n; y = 0 <= n ? ++_i : --_i) {
                    _results.push((function() {
                        var _j, _results1;
                        _results1 = [];
                        for (x = _j = 0; 0 <= k ? _j < k : _j > k; x = 0 <= k ? ++_j : --_j) {
                            _results1.push(0);
                        }
                        return _results1;
                    })());
                }
                return _results;
            })();
            solution = (function() {
                var _i, _ref, _results;
                _results = [];
                for (y = _i = 0, _ref = n - 1; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
                    _results.push((function() {
                        var _j, _ref1, _results1;
                        _results1 = [];
                        for (x = _j = 0, _ref1 = k - 1; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
                            _results1.push(0);
                        }
                        return _results1;
                    })());
                }
                return _results;
            })();
            for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
                table[i][0] = seq[i] + (i ? table[i - 1][0] : 0);
            }
            for (j = _j = 0; 0 <= k ? _j < k : _j > k; j = 0 <= k ? ++_j : --_j) {
                table[0][j] = seq[0];
            }
            for (i = _k = 1; 1 <= n ? _k < n : _k > n; i = 1 <= n ? ++_k : --_k) {
                for (j = _l = 1; 1 <= k ? _l < k : _l > k; j = 1 <= k ? ++_l : --_l) {
                    m = min((function() {
                        var _m, _results;
                        _results = [];
                        for (x = _m = 0; 0 <= i ? _m < i : _m > i; x = 0 <= i ? ++_m : --_m) {
                            _results.push([Math.max(table[x][j - 1], table[i][0] - table[x][0]), x]);
                        }
                        return _results;
                    })());
                    table[i][j] = m[0];
                    solution[i - 1][j - 1] = m[1];
                }
            }
            n = n - 1;
            k = k - 2;
            ans = [];
            while (k >= 0) {
                ans = [
                    (function() {
                        var _m, _ref, _ref1, _results;
                        _results = [];
                        for (i = _m = _ref = solution[n - 1][k] + 1, _ref1 = n + 1; _ref <= _ref1 ? _m < _ref1 : _m > _ref1; i = _ref <= _ref1 ? ++_m : --_m) {
                            _results.push(seq[i]);
                        }
                        return _results;
                    })()
                ].concat(ans);
                n = solution[n - 1][k];
                k = k - 1;
            }
            return [
                (function() {
                    var _m, _ref, _results;
                    _results = [];
                    for (i = _m = 0, _ref = n + 1; 0 <= _ref ? _m < _ref : _m > _ref; i = 0 <= _ref ? ++_m : --_m) {
                        _results.push(seq[i]);
                    }
                    return _results;
                })()
            ].concat(ans);
        };

        module.exports = function(seq, k) {
            if (k <= 0) {
                return [];
            }
            while (k) {
                try {
                    return linear_partition(seq, k--);
                } catch (_error) {}
            }
        };
    </script>

</body>

</html>